launchDir = "$proj/stress/nf"
workDir = "$NXF_CACHE/work/mmm"

includeConfig "$NXF_HOME/configs/nextflow.config"
process.conda = "$NXF_CONDA_CACHEDIR/mmm"

params {
  genome = 'Zmays_B73'
  name = 'mmm'
  outdir = "raw"
  stranded = false
  // motif scanning - fimo
  seqdb = '/home/springer/zhoux379/projects/stress/data/21_seq/05.cre.fas'
  seqdb_idx = '/home/springer/zhoux379/projects/stress/data/21_seq/05.cre.fas.fai'
  fimo_bg = '/home/springer/zhoux379/projects/stress/data/21_seq/05.cre.bg'
  // motif mining - dreme
  dm_tag = 'deg'
  dm_dir = '/home/springer/zhoux379/projects/stress/data/21_seq/20_seq_pairs'
  dm_out = "/home/springer/zhoux379/projects/stress/data/25_dreme/01_motifs"
  // ML
  ml_tag = 'b1'
  mtf = '/home/springer/zhoux379/projects/cre/data/01_tfbs/10.fam.meme'
  mtf_lst = '/home/springer/zhoux379/projects/cre/data/01_tfbs/10.fam.tsv'
  ml_dir = '/home/springer/zhoux379/projects/stress/data/41_ml/10_models'
  ml_seqdb_dir = '/home/springer/zhoux379/projects/stress/data/31_promoter'
  ml_module_dir = '/home/springer/zhoux379/projects/stress/data/41_ml/01_gene_lists'
  ml_best_mtf_dir = '/home/springer/zhoux379/projects/stress/data/41_ml/03_motif_lists'
}

process {
  withName:version { executor = 'local' }
  withName:seqret {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 5.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h + 1.h * task.attempt, 'time' ) }
  }
  withName:fimo {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 5.GB + 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h + 1.h * task.attempt, 'time' ) }
  }
  withName:meme {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 30.h + 1.h * task.attempt, 'time' ) }
  }
  withName:dreme {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 30.GB + 5.GB * task.attempt, 'memory' ) }
    time = { check_max( 85.h + 1.h * task.attempt, 'time' ) }
  }
  withName:ml2 {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 30.GB + 5.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h + 5.h * task.attempt, 'time' ) }
  }
  withName:mg_ml {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 50.GB + 5.GB * task.attempt, 'memory' ) }
    time = { check_max( 3.h + 1.h * task.attempt, 'time' ) }
  }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
