launchDir = '/home/springer/zhoux379/projects/stress/nf'
workDir = '/scratch.global/zhoux379/nf/work/mmm'

includeConfig '/home/springer/zhoux379/git/nf/configs/nextflow.config'

process.conda = '/home/springer/zhoux379/software/miniconda3/envs/mmm'

params {
  genome = 'Zmays_B73'
  name = 'mmm'
  seqdb = '/home/springer/zhoux379/projects/stress/data/21_seq/05.cre.fas'
  seqdb_idx = '/home/springer/zhoux379/projects/stress/data/21_seq/05.cre.fas.fai'
  fimo_bg = '/home/springer/zhoux379/projects/stress/data/21_seq/05.cre.bg'
  lst = '/home/springer/zhoux379/projects/stress/data/21_seq/15.picked.tsv'
  lstdir = "/home/springer/zhoux379/projects/stress/data/21_seq/15_lists"
  bg_lst = '/home/springer/zhoux379/projects/stress/data/21_seq/11.bg.tsv'
  bg_lstdir = "/home/springer/zhoux379/projects/stress/data/21_seq/11_bg_lists"
  mtf = '/home/springer/zhoux379/projects/cre/data/01_tfbs/10.fam.meme'
  mtf_lst = '/home/springer/zhoux379/projects/cre/data/01_tfbs/10.fam.tsv'
  data_lst = '/home/springer/zhoux379/projects/stress/data/41_ml/Zmays_B73/01.tsv'
  data_lst_dir = '/home/springer/zhoux379/projects/stress/data/41_ml/Zmays_B73/01_ml_input'
  outdir = "raw"
  stranded = false
}

process {
  withName:version { executor = 'local' }
  withName:seqret {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 5.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h + 1.h * task.attempt, 'time' ) }
  }
  withName:fimo {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 5.GB + 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h + 1.h * task.attempt, 'time' ) }
  }
  withName:meme {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 30.h + 1.h * task.attempt, 'time' ) }
  }
  withName:dreme {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 80.GB + 5.GB * task.attempt, 'memory' ) }
    time = { check_max( 90.h + 5.h * task.attempt, 'time' ) }
  }
  withName:ml1 {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 50.GB + 5.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h + 5.h * task.attempt, 'time' ) }
  }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
