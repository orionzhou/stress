launchDir = "$proj/stress/nf.dmodA"
workDir = "$NXF_CACHE/work/mmm"

includeConfig "$NXF_HOME/configs/nextflow.config"
includeConfig "$NXF_HOME/configs/mmm.config"

cleanup = false
params {
  genome = 'Zmays_B73'
  name = 'mmm'
  outdir = "raw"
  stranded = false
  seqdb = '/home/springer/zhoux379/projects/stress/data/21_seq/02.fas'
  seqdb_idx = '/home/springer/zhoux379/projects/stress/data/21_seq/02.fas.fai'
  // motif scanning - fimo
  fimo_bg = '/home/springer/zhoux379/projects/stress/data/21_seq/02.bg'
  // motif mining - dreme
  dm_tag = 'dmodA'
  dm_dir = '/home/springer/zhoux379/projects/stress/data/25_dreme/00_nf'
  // ML
  ml_tag = 'b1'
  ml_dir = '/home/springer/zhoux379/projects/stress/data/41_ml/00_nf'
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
